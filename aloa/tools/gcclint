#!/bin/bash

function generate_settings
{
    local compiler=$1
    local prepro_file=$2

    local DUMMY_FILE="dummy.c"

    [ -x $compiler ] || die "$compiler not accessible"

    echo -n '' >$INCLUDE_PATH_FILE
    echo -n '' >$DUMMY_FILE

    # Generate predefined preprocessor symbols.
    echo "/*lint -efile(*, $prepro_file) */" >$prepro_file
    echo "/*lint -save -e* */" >>$prepro_file
    $compiler -E -dM $DUMMY_FILE >>$prepro_file
    echo "/*lint -restore */" >>$prepro_file

    # Generate list of include paths
    skip=1
    $compiler -c -v $DUMMY_FILE 2>&1 | while read line; do
        if [ "$line" == '#include "..." search starts here:' ]; then
            read line
            if [ "$line" == '#include <...> search starts here:' ]; then
                read line
                skip=0
            fi
        fi

        if [ "$line" == 'End of search list.' ]; then
            skip=1
        fi

        if [ $skip -eq 0 ]; then
            echo "--i$($PATH_CONV $line)" >>$INCLUDE_PATH_FILE
            echo "+libdir($($PATH_CONV $line))" >>$INCLUDE_PATH_FILE
        fi
    done
}

function die
{
    echo "$0: Error: $1" 1>&2
    exit 1
}

INCLUDE_PATH_FILE="include.lnt"
GCC="/usr/bin/gcc"
GPP="/usr/bin/g++"
USE_CYGWIN=0
PATH_CONV=echo
# Is cygwin present?
cygpath --version > /dev/null 2>&1
if [ $? -eq 0 ]; then
    USE_CYGWIN=1
    PATH_CONV="cygpath -w"
fi

if [ "$PCLINT_PATH" == "" ] || [ ! -d "$PCLINT_PATH" ]; then
    die "PCLINT_PATH not defined or directory does not exist"
fi

GCC_VERSION=$($GCC --version | head -n 1 | sed -r -e "s/.*([0-9]+\.[0-9]+\.[0-9]+).*/\1/")
if [ $? -ne 0 ]; then
    die "Cannot find $GCC. Please check your installation."
fi

SETTINGS_DIR="$HOME/.gxxlint-$GCC_VERSION"

# If settings directory doesn't exist, create and fill it.
if [ ! -d $SETTINGS_DIR ]; then
    echo -n "Creating settings directory $SETTINGS_DIR... " 1>&2
    mkdir -p "$SETTINGS_DIR"
    if [ ! -d $SETTINGS_DIR ]; then
        echo "Cannot create $SETTINGS_DIR"
        exit 1
    fi

    pushd . >/dev/null
    cd $SETTINGS_DIR

    # First generate settings for GNU C compiler.
    generate_settings $GCC lint_cmac.h

    # If GNU C++ compiler exists, generate settings for g++ as well.
    # Note! This will overwrite 'include.lnt' from gcc but this doesn't
    # matter as the 'include.lnt' from g++ is a superset of the one
    # generated from gcc.
    if [ -x $GPP ]; then
        generate_settings $GPP lint_cppmac.h
    else
        echo "#error \"gcclint fatal error: C++ support missing. Please delete directory $SETTINGS_DIR and retry.\"" > lint_cppmac.h
    fi

    # Create dummies for files needed by newer versions of co-gcc.lnt.
    touch size-options.lnt gcc-include-path.lnt

    echo "DONE" 1>&2
    popd >/dev/null
fi

# Options that are passed to PC-Lint before any other options.
# -fff: Under Linux, filenames are case-sensitive.
# +rw(__is_pod): __is_pod is a GCC toolchain-specific keyword.
PREOPTS="-fff +rw(__is_pod)"

# Sometimes, the name of the PC-Lint executable is all-uppercase, sometimes
# all-lowercase. Hence, we try both variants.
PCLINT_EXE=$PCLINT_PATH/LINT-NT.EXE
if [[ ! -x $PCLINT_EXE ]]; then
    PCLINT_EXE=$PCLINT_PATH/lint-nt.exe
fi

PCLINT_PATH=$($PATH_CONV "$PCLINT_PATH")
SETTINGS_DIR=$($PATH_CONV "$SETTINGS_DIR")

# Ensure that PC-Lint exit code is not swallowed by subsequent pipe stages.
set -o pipefail

# Now, invoke PC-Lint.
# Remove trailing \r characters and turn all backslashes into forward slashes
# (to get posix-style pathnames).
$PCLINT_EXE $PREOPTS -I$SETTINGS_DIR -I$PCLINT_PATH/lnt co-gcc.lnt $INCLUDE_PATH_FILE $* | tr '\\\r' '/ ' 

